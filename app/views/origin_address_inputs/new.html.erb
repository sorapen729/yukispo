<!-- フラッシュメッセージ -->
<% flash.each do |message_type, message| %>
  <div class="alert alert-error">
    <%= message %>
  </div>
<% end %>

<!-- メイン -->
<main class="container-responsive pt-6 pb-24">
  <!-- タイトル -->
  <section class="text-center">
    <p class="text-slate-800 text-xl md:text-2xl font-semibold mt-4 text-left">住所入力</p>
  </section>

  <!-- ボタン群 -->
  <%= form_with url: origin_address_inputs_path, scope: :origin_address, local: true do |f| %>
  <div class="space-y-2 mt-8 md:mt-12">
    <label for="origin_address_address" class="block text-sm md:text-base font-medium text-slate-700">
      出発地の住所 <span class="ml-1 inline-flex items-center px-1.5 py-0.5 rounded bg-red-100 text-red-700 text-[11px]">必須</span>
    </label>

    <!-- アイコン付き入力 -->
    <div class="relative">
      <!-- ピンのアイコン -->
      <svg aria-hidden="true" class="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 md:w-6 md:h-6 opacity-70"
            viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 2C8.686 2 6 4.686 6 8c0 4.5 6 12 6 12s6-7.5 6-12c0-3.314-2.686-6-6-6zm0 8.5A2.5 2.5 0 1 1 12 5.5a2.5 2.5 0 0 1 0 5z"/>
      </svg>

      <%= f.text_field :address,
            required: true,
            autocomplete: "street-address",
            inputmode: "text",
            placeholder: "例）東京都千代田区丸の内1-9-1",
            class: "w-full rounded-xl border border-black/10 px-10 md:px-12 py-3 md:py-4 bg-white text-base md:text-lg
                    focus:outline-none focus:ring-2 focus:ring-sky-500 focus:border-transparent
                    placeholder:text-slate-400" %>
    </div>
  </div>

  <!-- 緯度・経度（地図で決める場合はJSで埋める想定） -->
  <%= f.hidden_field :lat %>
  <%= f.hidden_field :lng %>

  <!-- 送信ボタン（見た目をリンクと統一） -->
  <div class="mt-4">
    <%= button_tag type: :submit,
          class: "btn btn-primary w-full md:w-auto",
          data: { turbo_submits_with: "決定中…" } do %>
      決定
    <% end %>
  </div>

  <!-- クリアボタン(あると親切な補助UI） -->
  <div class="mt-3 flex items-center justify-between text-xs md:text-sm text-slate-500">
    <button type="button" id="clear-address" class="underline hover:text-slate-700">入力をクリア</button>
  </div>
<% end %>

<script>
  document.addEventListener("turbo:load", () => {
    const btn = document.getElementById("clear-address");
    const input = document.getElementById("origin_address_address");
    const latField = document.getElementById("origin_address_lat");
    const lngField = document.getElementById("origin_address_lng");
    const form = input?.closest('form');

    // クリアボタン機能
    if (btn && input) {
      btn.addEventListener("click", () => {
        input.value = "";
        if (latField) latField.value = "";
        if (lngField) lngField.value = "";
        input.focus();
      });
    }

    // フォーム送信時にジオコーディングを実行
    if (form && input && latField && lngField) {
      form.addEventListener("submit", async (e) => {
        const address = input.value.trim();

        // 住所が入力されているが緯度経度が未設定の場合
        if (address && (!latField.value || !lngField.value)) {
          e.preventDefault(); // フォーム送信を一時停止

          try {
            // ジオコーディングを実行
            const coords = await geocodeAddress(address);
            if (coords) {
              latField.value = coords.lat;
              lngField.value = coords.lng;
              console.log(`住所「${address}」を座標に変換: ${coords.lat}, ${coords.lng}`);

              // ジオコーディング完了後にフォームを再送信
              form.requestSubmit();
            } else {
              alert('住所の位置情報を取得できませんでした。住所を確認してください。');
            }
          } catch (error) {
            console.error('ジオコーディングエラー:', error);
            alert('住所の変換中にエラーが発生しました。もう一度お試しください。');
          }
        }
      });
    }
  });

  // 住所をジオコーディングする関数
  function geocodeAddress(address) {
    return new Promise((resolve, reject) => {
      // Google Maps APIが読み込まれているかチェック
      if (typeof google === 'undefined' || !google.maps || !google.maps.Geocoder) {
        console.error('Google Maps API が読み込まれていません');
        reject('Google Maps API が読み込まれていません');
        return;
      }

      const geocoder = new google.maps.Geocoder();

      geocoder.geocode({
        address: address,
        region: 'JP' // 日本の住所として検索
      }, (results, status) => {
        if (status === 'OK' && results[0]) {
          const location = results[0].geometry.location;
          resolve({
            lat: location.lat(),
            lng: location.lng()
          });
        } else {
          console.error('ジオコーディング失敗:', status);
          resolve(null);
        }
      });
    });
  }
</script>

</main>
