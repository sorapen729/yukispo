<div class="map-container">
  <h2 class="font-bold text-2xl mb-4 text-center">経路案内</h2>
  <div class="map-wrapper">
    <div id='map'></div>
  </div>
</div>

<style>
.map-container {
  padding: 16px;
  max-width: 100%;
  margin: 0 auto;
}

.map-wrapper {
  display: flex;
  justify-content: center;
  width: 100%;
}

#map {
  height: 300px;
  width: 100%;
  border: 1px solid #ccc;
  border-radius: 8px;
}

/* タブレット以上 */
@media (min-width: 768px) {
  .map-container {
    padding: 24px;
    max-width: 800px;
  }

  #map {
    height: 400px;
    max-width: 600px;
  }
}

/* デスクトップ以上 */
@media (min-width: 1024px) {
  .map-container {
    padding: 32px;
    max-width: 1000px;
  }

  #map {
    height: 500px;
    max-width: 800px;
  }
}
</style>

<script>
// 住所データをJavaScriptで使用できるように
const addressesData = <%= raw @addresses.to_json %>;
const latestAddress = <%= raw @latest_address.to_json %>;

document.addEventListener('DOMContentLoaded', function() {
  initializeMap();
});

document.addEventListener('turbo:load', function() {
  initializeMap();
});

function initializeMap() {
  console.log('初期化開始');

  if (typeof google === 'undefined') {
    console.log('Google Maps API が読み込まれていません');
    return;
  }

  const mapElement = document.getElementById("map");
  if (!mapElement) {
    console.log('map要素が見つかりません');
    return;
  }

  console.log('マップを作成中...');

  // 最新の住所がある場合はそれを中心に、なければ東京を中心に
  const initialCenter = latestAddress && latestAddress.lat && latestAddress.lng
    ? { lat: parseFloat(latestAddress.lat), lng: parseFloat(latestAddress.lng) }
    : { lat: 35.6762, lng: 139.6503 }; // 東京

  const map = new google.maps.Map(mapElement, {
    zoom: 15, // 最新住所にフォーカスするためズームレベルを上げる
    center: initialCenter,
  });

  // 住所データが存在する場合の処理
  if (addressesData && addressesData.length > 0) {
    console.log('住所データ:', addressesData);
    console.log('住所データの件数:', addressesData.length);

    // 各住所に対してマーカーを作成（最新の住所は異なる色で表示）
    addressesData.forEach(function(address, index) {
      if (address.lat && address.lng) {
        // 最新の住所（最初の要素）は赤色、それ以外は青色のマーカー
        const isLatest = index === 0;
        createMarker(map, address.lat, address.lng, address.address, isLatest);
      } else {
        // 緯度経度がない場合はジオコーディングを実行
        geocodeAddress(map, address.address, address.id);
      }
    });
  } else {
    // デフォルトマーカー（東京）
    const marker = new google.maps.Marker({
      position: { lat: 35.6762, lng: 139.6503 },
      map: map,
      title: "東京"
    });
  }

  console.log('マップが作成されました');
}

// マーカーを作成する関数
function createMarker(map, lat, lng, title, isLatest = false) {
  // 最新の住所は赤色で大きく、それ以外は青色で小さく表示
  const markerColor = isLatest ? '#EF4444' : '#3B82F6';
  const markerSize = isLatest ? 32 : 24;

  const marker = new google.maps.Marker({
    position: { lat: parseFloat(lat), lng: parseFloat(lng) },
    map: map,
    title: title,
    icon: {
      url: 'data:image/svg+xml;charset=UTF-8,' + encodeURIComponent(`
        <svg xmlns="http://www.w3.org/2000/svg" width="${markerSize}" height="${markerSize}" viewBox="0 0 24 24" fill="${markerColor}">
          <path d="M12 2C8.686 2 6 4.686 6 8c0 4.5 6 12 6 12s6-7.5 6-12c0-3.314-2.686-6-6-6zm0 8.5A2.5 2.5 0 1 1 12 5.5a2.5 2.5 0 0 1 0 5z"/>
        </svg>
      `),
      scaledSize: new google.maps.Size(markerSize, markerSize)
    }
  });

  // マーカークリック時に住所を表示（最新の住所の場合は「最新」ラベルを追加）
  const content = isLatest
    ? `<div style="font-weight: bold; color: #1f2937;">${title}<br><span style="color: #EF4444; font-size: 12px;">最新の住所</span></div>`
    : `<div style="font-weight: bold; color: #1f2937;">${title}</div>`;

  const infoWindow = new google.maps.InfoWindow({
    content: content
  });

  marker.addListener('click', function() {
    infoWindow.open(map, marker);
  });

  return marker;
}

// 住所をジオコーディングする関数
function geocodeAddress(map, address, addressId) {
  const geocoder = new google.maps.Geocoder();

  geocoder.geocode({ address: address }, function(results, status) {
    if (status === 'OK') {
      const location = results[0].geometry.location;
      const lat = location.lat();
      const lng = location.lng();

      console.log(`住所「${address}」の座標: ${lat}, ${lng}`);

      // マーカーを作成
      createMarker(map, lat, lng, address);

      // データベースに緯度経度を保存（オプション）
      updateAddressCoordinates(addressId, lat, lng);
    } else {
      console.error('ジオコーディングに失敗しました:', status);
    }
  });
}

// 住所の緯度経度をデータベースに保存する関数（オプション）
function updateAddressCoordinates(addressId, lat, lng) {
  // この機能は必要に応じて実装
  console.log(`住所ID ${addressId} の座標を更新: ${lat}, ${lng}`);
}
</script>
